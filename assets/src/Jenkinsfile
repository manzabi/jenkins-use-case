// import
@Library("fltrJenkinsLib")
import com.fluttr.fltrJenkinsGlobalLib
import groovy.transform.Field

@Field static masterMap = [
    tag: 'stg',
    gkeClusterCredentials: 'gcloud container clusters get-credentials fltr-stg-kube --zone europe-west4-a --project stg-env-228711',
    deploymentName: 'controlroom'
]

@Field static deployMap = [
    tag: 'qas',
    gkeClusterCredentials: 'gcloud container clusters get-credentials fltr-qas-kube --zone europe-west4-a --project qa-env-225712',
    deploymentName: 'controlroom'
]

@Field static releaseMap = [
    tag: 'prd',
    gkeClusterCredentials: 'gcloud container clusters get-credentials fltr-prd-kube --zone europe-west4-a --project exalted-entity-163908',
    deploymentName: 'controlroom'
]

def fltr

def notificationChannel = "#devops"

def logContent

def gcrURL = "eu.gcr.io/devops-tools-228909/fluttr-core-image-repository/controlroom"

def buildTimestamp

def tag

def configMap


pipeline {
    agent any

    tools { 
        maven 'Maven 3.2.5' 
    }

    // global env variables
    environment {
        EMAIL_RECIPIENTS = 'devops@fluttr.in'
    }



    stages {


        stage('Initializing Fluttr Global Library') {
            steps {
                script {
                      fltr = new fltrJenkinsGlobalLib()
                      buildTimestamp = fltr.buildTimestamp()
                 }
             }
        }

        stage('Define build config') {
                    steps {
                        script {
                            if (env.BRANCH_NAME == "deploy") {
                                 configMap = deployMap
                            } else if(env.BRANCH_NAME == "release") {
                                 configMap = releaseMap
                            } else if(env.BRANCH_NAME == "master") {
                                 configMap = masterMap
                            }
                        }
                    }

        }

        stage('Notify build start') {
                    steps {
                        script {
                              fltr.notifySlackWithChannel('STARTED', notificationChannel)
                         }
                     }
        }





        stage('Build artifact and Docker Image') {

            steps {

                // create the release version then create a tage with it , then push to nexus releases the released jar
                script {

                    slackSend(color: '#BDFFC3', channel: notificationChannel, message: "- Building artifact and Docker Image")

                    try{

                        if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {


                            sh "mvn -Dmaven.test.skip=true -DbuildTimestamp=${buildTimestamp} -Ddockerfile-image-repository-url=${gcrURL} -Dspring.profile.active="+configMap['tag']+" -Dbizaround.env="+configMap['tag']+" clean package"



                        } else {
                            error "Release is not possible. as build is not successful"
                        }


                    } catch (e) {
                            currentBuild.result = 'FAILURE'
                            throw e
                    }

                }
            }
        }

        stage('Pushing docker image to $gcrURL:$buildTimestamp'){

                    steps {

                        // create the release version then create a tage with it , then push to nexus releases the released jar
                        script {

                                slackSend(color: '#BDFFC3', channel: notificationChannel, message: "- Pushing docker image to ${gcrURL}:${buildTimestamp}")


                                sh "docker push ${gcrURL}:${buildTimestamp}"

                        }
                    }
        }

        //get cluster credentials


         stage('Getting k8s cluster credentials'){

                    steps {

                        script {

                                slackSend(color: '#BDFFC3', channel: notificationChannel, message: "- Getting k8s cluster credentials")

                                commandOutput = sh(script: configMap['gkeClusterCredentials'], returnStdout: true)

                                slackSend(color: '#BDFFC3', channel: notificationChannel, message: commandOutput)

                        }
                    }


        }

        stage('Applying docker image to k8s deployment'){

                    steps {

                        script {

                               //set image

                                slackSend(color: '#BDFFC3', channel: notificationChannel, message: "- Applying docker image to k8s deployment")
    
                                commandOutput = sh(script: "kubectl set image deployment/"+configMap['deploymentName']+" *=$gcrURL:$buildTimestamp", returnStdout: true)

                                slackSend(color: '#BDFFC3', channel: notificationChannel, message: commandOutput)

                        }
                    }
        }


        stage('Notify build end') {
             steps {
                script {
                     fltr.notifySlackWithChannel(currentBuild.result, notificationChannel)

                }
             }
        }
    }

    post {
        // Always runs. And it runs before any of the other post conditions.
        always {
            // Let's wipe out the workspace before we finish!
            deleteDir()
        }
    }

// The options directive is for configuration that applies to the whole job.
    options {
        // For example, we'd like to make sure we only keep 10 builds at a time, so
        // we don't fill up our storage!
        buildDiscarder(logRotator(numToKeepStr: '5'))

        // And we'd really like to be sure that this build doesn't hang forever, so
        // let's time it out after an hour.
        timeout(time: 25, unit: 'MINUTES')
    }

}

def developmentArtifactVersion = ''
def releasedVersion = ''

// get change log to be sent over slack
@NonCPS
def getChangeString() {
    MAX_MSG_LEN = 100
    def changeString = ""

    echo "Gathering SCM changes"
    def changeLogSets = currentBuild.changeSets
    for (int i = 0; i < changeLogSets.size(); i++) {
        def entries = changeLogSets[i].items
        for (int j = 0; j < entries.length; j++) {
            def entry = entries[j]
            truncated_msg = entry.msg.take(MAX_MSG_LEN)
            changeString += " - ${truncated_msg} [${entry.author}]\n"
        }
    }

    if (!changeString) {
        changeString = " - No new changes"
    }
    return changeString
}

def sendEmail(status) {
    mail(
            to: "$EMAIL_RECIPIENTS",
            subject: "Build $BUILD_NUMBER - " + status + " (${currentBuild.fullDisplayName})",
            body: "Changes:\n " + getChangeString() + "\n\n Check console output at: $BUILD_URL/console" + "\n")
}

def getDevVersion() {
    def gitCommit = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()
    def versionNumber;
    if (gitCommit == null) {
        versionNumber = env.BUILD_NUMBER;
    } else {
        versionNumber = gitCommit.take(8);
    }
    print 'build  versions...'
    print versionNumber
    return versionNumber
}

def getReleaseVersion() {
    def pom = readMavenPom file: 'pom.xml'
    def gitCommit = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()
    def versionNumber;
    if (gitCommit == null) {
        versionNumber = env.BUILD_NUMBER;
    } else {
        versionNumber = gitCommit.take(8);
    }
    return pom.version.replace("-SNAPSHOT", ".${versionNumber}")
}

// if you want parallel execution , check below :
/* stage('Quality Gate(Integration Tests and Sonar Scan)') {
           // Run the maven build
           steps {
               parallel(
                       IntegrationTest: {
                           script {
                               def mvnHome = tool 'Maven 3.5.2'
                               if (isUnix()) {
                                   sh "'${mvnHome}/bin/mvn'  verify -Dunit-tests.skip=true"
                               } else {
                                   bat(/"${mvnHome}\bin\mvn" verify -Dunit-tests.skip=true/)
                               }
                           }
                       },
                       SonarCheck: {
                           script {
                               def mvnHome = tool 'Maven 3.5.2'
                               withSonarQubeEnv {
                                   // sh "'${mvnHome}/bin/mvn'  verify sonar:sonar -Dsonar.host.url=http://bicsjava.bc/sonar/ -Dmaven.test.failure.ignore=true"
                                   sh "'${mvnHome}/bin/mvn'  verify sonar:sonar -Dmaven.test.failure.ignore=true"
                               }
                           }
                       },
                       failFast: true)
           }
       }*/
